{"type":"operationStart","subtype":"profile","data":{"_id":"OVRRjZexQLcAEZY9","timestamp":"2023-01-28T21:13:04.982Z","state":"queued","mode":"standard","creationDate":"2023-01-28T21:13:04.985Z","modificationDate":"2023-01-28T21:13:04.985Z","shortid":"FwR-K-Y","$entitySet":"profiles"},"doDiffs":false,"timestamp":1674940384983,"id":"luhdz11ovg5i2rk","previousOperationId":null,"operationId":"6ofl7tfc4hd5v7k"}
{"type":"log","level":"info","message":"Render request 14 queued for execution and waiting for available worker","previousOperationId":"6ofl7tfc4hd5v7k","timestamp":1674940384984,"id":"c5al8vd61h69q95"}
{"type":"operationStart","subtype":"render","name":"orders-main","previousOperationId":"6ofl7tfc4hd5v7k","timestamp":1674940384995,"id":"s0pzpgvij47ygof","previousEventId":"luhdz11ovg5i2rk","operationId":"0lfr2c5plfsfalr"}
{"type":"log","timestamp":1674940384996,"level":"info","message":"Starting rendering request 14","meta":{"rootId":"7dhmy9z8oo0oapy","id":"7dhmy9z8oo0oapy"},"id":"eb8kkoh6bgil27m","previousOperationId":"0lfr2c5plfsfalr"}
{"type":"log","timestamp":1674940384996,"level":"info","message":"Rendering template { name: orders-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"7dhmy9z8oo0oapy","id":"7dhmy9z8oo0oapy"},"id":"4u8vg5npzumvldf","previousOperationId":"0lfr2c5plfsfalr"}
{"type":"log","timestamp":1674940384997,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"7dhmy9z8oo0oapy","id":"7dhmy9z8oo0oapy"},"id":"mxhhw3zqboxrzl4","previousOperationId":"0lfr2c5plfsfalr"}
{"type":"log","timestamp":1674940385004,"level":"debug","message":"Executing script orders-script (beforeRender)","meta":{"rootId":"7dhmy9z8oo0oapy","id":"7dhmy9z8oo0oapy"},"id":"vjow8t6yhog10k0","previousOperationId":"0lfr2c5plfsfalr"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1674940385033,"id":"uxuxq7k3q903bou","previousEventId":"s0pzpgvij47ygof","operationId":"nl8yv8luaulwmpa","previousOperationId":"0lfr2c5plfsfalr"}
{"type":"operationStart","subtype":"script","name":"scripts orders-script","previousOperationId":"nl8yv8luaulwmpa","timestamp":1674940385033,"id":"qp38bwoqvi6o3qh","previousEventId":"uxuxq7k3q903bou","operationId":"z8fkb50ekj4emoq"}
{"type":"log","timestamp":1674940385038,"level":"warn","message":"Error when processing render request 14\n(because) error when evaluating custom script /samples/Orders/orders-script\nCannot read properties of undefined (reading 'get')\n\n(sandbox.js line 6:28)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return this.httpClient.get(this.endpoint)\n    |                            ^\n  7 |         .pipe(\n  8 |             tap(users => console.log('Authors retrieved!')),\n  9 |             // catchError(this.handleError('Get story', []))\n\n(sandbox.js line 15:26)\n\n  13 | // group the data for report\n  14 | async function prepareDataSource() {\n> 15 |     const orders = await fetchOrders()\n     |                          ^\n  16 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  17 |         a[v.name] = a[v.name] || []\n  18 |         a[v.name].push(v)\n\n(sandbox.js line 48:29)\n\n  46 | // add jsreport hook which modifies the report input data\n  47 | async function beforeRender(req, res) {\n> 48 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  49 | }\n\n(sandbox.js line 61:18)\nTypeError: Cannot read properties of undefined (reading 'get')\n    at fetchOrders (sandbox.js:6:28)\n    at prepareDataSource (sandbox.js:15:26)\n    at Object.beforeRender (sandbox.js:48:29)\n    at executionFn (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)\n    at sandbox.js:61:18","meta":{"rootId":"7dhmy9z8oo0oapy","id":"7dhmy9z8oo0oapy"},"id":"rvcqvz9v5mqv2o7","previousOperationId":"z8fkb50ekj4emoq"}
{"type":"log","timestamp":1674940385038,"level":"warn","message":"Rendering request 14 finished with error in 56 ms","meta":{"rootId":"7dhmy9z8oo0oapy","id":"7dhmy9z8oo0oapy"},"id":"9jcw0pc8w2psm3q","previousOperationId":"z8fkb50ekj4emoq"}
{"type":"error","timestamp":1674940385046,"statusCode":400,"weak":true,"lineNumber":6,"decoratedSuffix":"\n\n(sandbox.js line 6:28)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return this.httpClient.get(this.endpoint)\n    |                            ^\n  7 |         .pipe(\n  8 |             tap(users => console.log('Authors retrieved!')),\n  9 |             // catchError(this.handleError('Get story', []))\n\n(sandbox.js line 15:26)\n\n  13 | // group the data for report\n  14 | async function prepareDataSource() {\n> 15 |     const orders = await fetchOrders()\n     |                          ^\n  16 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  17 |         a[v.name] = a[v.name] || []\n  18 |         a[v.name].push(v)\n\n(sandbox.js line 48:29)\n\n  46 | // add jsreport hook which modifies the report input data\n  47 | async function beforeRender(req, res) {\n> 48 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  49 | }\n\n(sandbox.js line 61:18)","entity":{"shortid":"BJX1Jw82ce","name":"orders-script","content":"// server side script fetching remote data and preparing report data source\nconst http = require('http');\n\n// call remote http rest api\nfunction fetchOrders() {\n    return this.httpClient.get(this.endpoint)\n        .pipe(\n            tap(users => console.log('Authors retrieved!')),\n            // catchError(this.handleError('Get story', []))\n        );\n}\n\n// group the data for report\nasync function prepareDataSource() {\n    const orders = await fetchOrders()\n    const ordersByShipCountry = orders.reduce((a, v) => {\n        a[v.name] = a[v.name] || []\n        a[v.name].push(v)\n        return a\n    }, {})\n\n    return Object.keys(ordersByShipCountry).map((country) => {\n        const ordersInCountry = ordersByShipCountry[country]\n\n        const accumulated = {}\n\n        ordersInCountry.forEach((o) => {\n            o.OrderDate = new Date(o.OrderDate);\n            const key = o.OrderDate.getFullYear() + '/' + (o.OrderDate.getMonth() + 1);\n            accumulated[key] = accumulated[key] || {\n                value: 0,\n                orderDate: o.OrderDate\n            };\n            accumulated[key].value++;\n        });\n\n        return {\n            rows: ordersInCountry,\n            country,\n            accumulated\n        }\n\n    }).slice(0, 2)\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n    req.data.orders = await prepareDataSource()\n}"},"property":"content","logged":true,"previousOperationId":"z8fkb50ekj4emoq","id":"re1ysvsjj3todo9","stack":"TypeError: Cannot read properties of undefined (reading 'get')\n    at fetchOrders (sandbox.js:6:28)\n    at prepareDataSource (sandbox.js:15:26)\n    at Object.beforeRender (sandbox.js:48:29)\n    at executionFn (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)\n    at sandbox.js:61:18","message":"Error when evaluating custom script /samples/Orders/orders-script\nCannot read properties of undefined (reading 'get')\n\n(sandbox.js line 6:28)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return this.httpClient.get(this.endpoint)\n    |                            ^\n  7 |         .pipe(\n  8 |             tap(users => console.log('Authors retrieved!')),\n  9 |             // catchError(this.handleError('Get story', []))\n\n(sandbox.js line 15:26)\n\n  13 | // group the data for report\n  14 | async function prepareDataSource() {\n> 15 |     const orders = await fetchOrders()\n     |                          ^\n  16 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  17 |         a[v.name] = a[v.name] || []\n  18 |         a[v.name].push(v)\n\n(sandbox.js line 48:29)\n\n  46 | // add jsreport hook which modifies the report input data\n  47 | async function beforeRender(req, res) {\n> 48 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  49 | }\n\n(sandbox.js line 61:18)"}
