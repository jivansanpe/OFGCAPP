{"type":"operationStart","subtype":"profile","data":{"_id":"e0jheCLIOVm6x4Wg","timestamp":"2023-01-28T21:09:41.063Z","state":"queued","mode":"standard","creationDate":"2023-01-28T21:09:41.066Z","modificationDate":"2023-01-28T21:09:41.066Z","shortid":"r5d80WT","$entitySet":"profiles"},"doDiffs":false,"timestamp":1674940181065,"id":"ruuczy4bc1j6g3z","previousOperationId":null,"operationId":"04d0h2gql6bw0ab"}
{"type":"log","level":"info","message":"Render request 12 queued for execution and waiting for available worker","previousOperationId":"04d0h2gql6bw0ab","timestamp":1674940181065,"id":"ltupfbq21e9w47n"}
{"type":"operationStart","subtype":"render","name":"orders-main","previousOperationId":"04d0h2gql6bw0ab","timestamp":1674940181080,"id":"15nmom6ip4hbn47","previousEventId":"ruuczy4bc1j6g3z","operationId":"popje7zesx9bdd3"}
{"type":"log","timestamp":1674940181080,"level":"info","message":"Starting rendering request 12","meta":{"rootId":"4733lmjmi5bgn76","id":"4733lmjmi5bgn76"},"id":"hcbjftqh2e5w7fl","previousOperationId":"popje7zesx9bdd3"}
{"type":"log","timestamp":1674940181081,"level":"info","message":"Rendering template { name: orders-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"4733lmjmi5bgn76","id":"4733lmjmi5bgn76"},"id":"vidu4k0ncp0akmt","previousOperationId":"popje7zesx9bdd3"}
{"type":"log","timestamp":1674940181083,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"4733lmjmi5bgn76","id":"4733lmjmi5bgn76"},"id":"hh5wqpvyiawico1","previousOperationId":"popje7zesx9bdd3"}
{"type":"log","timestamp":1674940181090,"level":"debug","message":"Executing script orders-script (beforeRender)","meta":{"rootId":"4733lmjmi5bgn76","id":"4733lmjmi5bgn76"},"id":"i7h04yuot2bss6g","previousOperationId":"popje7zesx9bdd3"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1674940181142,"id":"fm1sws9e8b2o802","previousEventId":"15nmom6ip4hbn47","operationId":"li4xrziin3hy1h3","previousOperationId":"popje7zesx9bdd3"}
{"type":"operationStart","subtype":"script","name":"scripts orders-script","previousOperationId":"li4xrziin3hy1h3","timestamp":1674940181142,"id":"d5spw0lk2i9g1bp","previousEventId":"fm1sws9e8b2o802","operationId":"cydcyle6g6wtibr"}
{"type":"log","timestamp":1674940181150,"level":"warn","message":"Error when processing render request 12\n(because) error when evaluating custom script /samples/Orders/orders-script\nresult is not defined\n\n(sandbox.js line 14:21)\n\n  12 |             result.on('end', () => resolve(JSON.parse(str).value));\n  13 |         },\n> 14 |         console.log(result));\n     |                     ^\n  15 |     })\n  16 | }\n  17 |\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         http.get('http://localhost:8000/api/authors',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 20:26)\n\n  18 | // group the data for report\n  19 | async function prepareDataSource() {\n> 20 |     const orders = await fetchOrders()\n     |                          ^\n  21 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  22 |         a[v.name] = a[v.name] || []\n  23 |         a[v.name].push(v)\n\n(sandbox.js line 53:29)\n\n  51 | // add jsreport hook which modifies the report input data\n  52 | async function beforeRender(req, res) {\n> 53 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  54 | }\n\n(sandbox.js line 66:18)\nReferenceError: result is not defined\n    at sandbox.js:14:21\n    at new Promise (<anonymous>)\n    at fetchOrders (sandbox.js:6:12)\n    at prepareDataSource (sandbox.js:20:26)\n    at Object.beforeRender (sandbox.js:53:29)\n    at executionFn (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)\n    at sandbox.js:66:18","meta":{"rootId":"4733lmjmi5bgn76","id":"4733lmjmi5bgn76"},"id":"ws3wo4ujp7t05yd","previousOperationId":"cydcyle6g6wtibr"}
{"type":"log","timestamp":1674940181150,"level":"warn","message":"Rendering request 12 finished with error in 87 ms","meta":{"rootId":"4733lmjmi5bgn76","id":"4733lmjmi5bgn76"},"id":"6u60goaoue41g49","previousOperationId":"cydcyle6g6wtibr"}
{"type":"error","timestamp":1674940181164,"statusCode":400,"weak":true,"lineNumber":14,"decoratedSuffix":"\n\n(sandbox.js line 14:21)\n\n  12 |             result.on('end', () => resolve(JSON.parse(str).value));\n  13 |         },\n> 14 |         console.log(result));\n     |                     ^\n  15 |     })\n  16 | }\n  17 |\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         http.get('http://localhost:8000/api/authors',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 20:26)\n\n  18 | // group the data for report\n  19 | async function prepareDataSource() {\n> 20 |     const orders = await fetchOrders()\n     |                          ^\n  21 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  22 |         a[v.name] = a[v.name] || []\n  23 |         a[v.name].push(v)\n\n(sandbox.js line 53:29)\n\n  51 | // add jsreport hook which modifies the report input data\n  52 | async function beforeRender(req, res) {\n> 53 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  54 | }\n\n(sandbox.js line 66:18)","entity":{"shortid":"BJX1Jw82ce","name":"orders-script","content":"// server side script fetching remote data and preparing report data source\nconst http = require('http');\n\n// call remote http rest api\nfunction fetchOrders() {\n    return new Promise((resolve, reject) => {\n        http.get('http://localhost:8000/api/authors',\n        (result) => {\n            var str = '';\n            result.on('data', (b) => str += b);\n            result.on('error', reject);\n            result.on('end', () => resolve(JSON.parse(str).value));\n        },\n        console.log(result));\n    })\n}\n\n// group the data for report\nasync function prepareDataSource() {\n    const orders = await fetchOrders()\n    const ordersByShipCountry = orders.reduce((a, v) => {\n        a[v.name] = a[v.name] || []\n        a[v.name].push(v)\n        return a\n    }, {})\n\n    return Object.keys(ordersByShipCountry).map((country) => {\n        const ordersInCountry = ordersByShipCountry[country]\n\n        const accumulated = {}\n\n        ordersInCountry.forEach((o) => {\n            o.OrderDate = new Date(o.OrderDate);\n            const key = o.OrderDate.getFullYear() + '/' + (o.OrderDate.getMonth() + 1);\n            accumulated[key] = accumulated[key] || {\n                value: 0,\n                orderDate: o.OrderDate\n            };\n            accumulated[key].value++;\n        });\n\n        return {\n            rows: ordersInCountry,\n            country,\n            accumulated\n        }\n\n    }).slice(0, 2)\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n    req.data.orders = await prepareDataSource()\n}"},"property":"content","logged":true,"previousOperationId":"cydcyle6g6wtibr","id":"nyq0gtvt0u0yxti","stack":"ReferenceError: result is not defined\n    at sandbox.js:14:21\n    at new Promise (<anonymous>)\n    at fetchOrders (sandbox.js:6:12)\n    at prepareDataSource (sandbox.js:20:26)\n    at Object.beforeRender (sandbox.js:53:29)\n    at executionFn (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)\n    at sandbox.js:66:18","message":"Error when evaluating custom script /samples/Orders/orders-script\nresult is not defined\n\n(sandbox.js line 14:21)\n\n  12 |             result.on('end', () => resolve(JSON.parse(str).value));\n  13 |         },\n> 14 |         console.log(result));\n     |                     ^\n  15 |     })\n  16 | }\n  17 |\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         http.get('http://localhost:8000/api/authors',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 20:26)\n\n  18 | // group the data for report\n  19 | async function prepareDataSource() {\n> 20 |     const orders = await fetchOrders()\n     |                          ^\n  21 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  22 |         a[v.name] = a[v.name] || []\n  23 |         a[v.name].push(v)\n\n(sandbox.js line 53:29)\n\n  51 | // add jsreport hook which modifies the report input data\n  52 | async function beforeRender(req, res) {\n> 53 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  54 | }\n\n(sandbox.js line 66:18)"}
