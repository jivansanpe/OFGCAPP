{"type":"operationStart","subtype":"profile","data":{"_id":"K76qZKRQMVakZvEV","timestamp":"2023-02-01T17:49:09.924Z","state":"queued","mode":"standard","creationDate":"2023-02-01T17:49:09.926Z","modificationDate":"2023-02-01T17:49:09.926Z","shortid":"k8nFCc_","$entitySet":"profiles"},"doDiffs":false,"timestamp":1675273749925,"id":"99yocp229ktbxsa","previousOperationId":null,"operationId":"z4ulvta7o6cq09v"}
{"type":"log","level":"info","message":"Render request 38 queued for execution and waiting for available worker","previousOperationId":"z4ulvta7o6cq09v","timestamp":1675273749925,"id":"c3gecg18uvf219q"}
{"type":"operationStart","subtype":"render","name":"orders-main","previousOperationId":"z4ulvta7o6cq09v","timestamp":1675273749940,"id":"281y0jldx7srtli","previousEventId":"99yocp229ktbxsa","operationId":"l5lp8fc0k4aqvbu"}
{"type":"log","timestamp":1675273749940,"level":"info","message":"Starting rendering request 38","meta":{"rootId":"nc79c22igzi1yxi","id":"nc79c22igzi1yxi"},"id":"ug1rjtnkx5tv4gh","previousOperationId":"l5lp8fc0k4aqvbu"}
{"type":"log","timestamp":1675273749940,"level":"info","message":"Rendering template { name: orders-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"nc79c22igzi1yxi","id":"nc79c22igzi1yxi"},"id":"2mcn393bw3t7g6g","previousOperationId":"l5lp8fc0k4aqvbu"}
{"type":"log","timestamp":1675273749941,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"nc79c22igzi1yxi","id":"nc79c22igzi1yxi"},"id":"phlrc9us43mi6ea","previousOperationId":"l5lp8fc0k4aqvbu"}
{"type":"log","timestamp":1675273749948,"level":"debug","message":"Executing script orders-script (beforeRender)","meta":{"rootId":"nc79c22igzi1yxi","id":"nc79c22igzi1yxi"},"id":"o0makq9nj2p9je6","previousOperationId":"l5lp8fc0k4aqvbu"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1675273749981,"id":"mvtavw2910rikoy","previousEventId":"281y0jldx7srtli","operationId":"6xh0w730n8pewnc","previousOperationId":"l5lp8fc0k4aqvbu"}
{"type":"operationStart","subtype":"script","name":"scripts orders-script","previousOperationId":"6xh0w730n8pewnc","timestamp":1675273749981,"id":"aczt1o215u8d7bl","previousEventId":"mvtavw2910rikoy","operationId":"545f1dccdg11kpb"}
{"type":"log","timestamp":1675273749981,"level":"debug","message":"(console:log) AAAAAAAAAAAAAAAAAAAAAAA  undefined","meta":{"userLevel":true,"rootId":"nc79c22igzi1yxi","id":"nc79c22igzi1yxi"},"id":"vdn86zj8gljxm6m","previousOperationId":"545f1dccdg11kpb"}
{"type":"log","timestamp":1675273750192,"level":"warn","message":"Error when processing render request 38\n(because) error when evaluating custom script /samples/Orders/orders-script\nCannot read properties of undefined (reading 'authors')\n\n(sandbox.js line 11:29)\n\n   9 |     const resAuthors = await axios.get('http://localhost:8000/api/authors')\n  10 |      \n> 11 |      req.authors = { ...req.authors,\n     |                             ^\n  12 |         ...resAuthors.data.data.map(author=> {\n  13 |           return {\n  14 |             ...author,\n\n(sandbox.js line 24:21)\n\n  22 | // group the data for report\n  23 | async function prepareDataSource() {\n> 24 |     const authors = await fetchOrders()\n     |                     ^\n  25 |     console.log(authors);\n  26 |     return authors;\n  27 |     // console.log(orders);\n\n(sandbox.js line 60:23)\n\n  58 | // add jsreport hook which modifies the report input data\n  59 | async function beforeRender(req, res) {\n> 60 |     req.data.orders = await prepareDataSource()\n     |                       ^\n  61 | }\n\n\nTypeError: Cannot read properties of undefined (reading 'authors')\n    at fetchOrders (sandbox.js:11:29)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async prepareDataSource (sandbox.js:24:21)\n    at async Object.beforeRender (sandbox.js:60:23)\n    at async executionFn (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:11)\n    at async run (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:184:24)\n    at async WorkerReporter._runInSandbox (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\runInSandbox.js:180:14)\n    at async executeScript (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:122:12)\n    at async Scripts._runScript (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:140:30)\n    at async Scripts.handleBeforeRender (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:64:7)","meta":{"rootId":"nc79c22igzi1yxi","id":"nc79c22igzi1yxi"},"id":"y93t31rcm5wwj1a","previousOperationId":"545f1dccdg11kpb"}
{"type":"log","timestamp":1675273750192,"level":"warn","message":"Rendering request 38 finished with error in 268 ms","meta":{"rootId":"nc79c22igzi1yxi","id":"nc79c22igzi1yxi"},"id":"3s6a17wyxdvytcx","previousOperationId":"545f1dccdg11kpb"}
{"type":"error","timestamp":1675273750197,"statusCode":400,"weak":true,"lineNumber":11,"decoratedSuffix":"\n\n(sandbox.js line 11:29)\n\n   9 |     const resAuthors = await axios.get('http://localhost:8000/api/authors')\n  10 |      \n> 11 |      req.authors = { ...req.authors,\n     |                             ^\n  12 |         ...resAuthors.data.data.map(author=> {\n  13 |           return {\n  14 |             ...author,\n\n(sandbox.js line 24:21)\n\n  22 | // group the data for report\n  23 | async function prepareDataSource() {\n> 24 |     const authors = await fetchOrders()\n     |                     ^\n  25 |     console.log(authors);\n  26 |     return authors;\n  27 |     // console.log(orders);\n\n(sandbox.js line 60:23)\n\n  58 | // add jsreport hook which modifies the report input data\n  59 | async function beforeRender(req, res) {\n> 60 |     req.data.orders = await prepareDataSource()\n     |                       ^\n  61 | }\n\n","entity":{"shortid":"BJX1Jw82ce","name":"orders-script","content":"// server side script fetching remote data and preparing report data source\nconst http = require('http');\nconst axios = require('axios');\n// call remote http rest api\nasync function fetchOrders(req, res) {\n\nconsole.log('AAAAAAAAAAAAAAAAAAAAAAA ' , req);\n\n    const resAuthors = await axios.get('http://localhost:8000/api/authors')\n     \n     req.authors = { ...req.authors,\n        ...resAuthors.data.data.map(author=> {\n          return {\n            ...author,\n          }\n        })\n    }\n    console.log(req.authors)\n\n    return req.authors;\n}\n// group the data for report\nasync function prepareDataSource() {\n    const authors = await fetchOrders()\n    console.log(authors);\n    return authors;\n    // console.log(orders);\n    // const ordersByShipCountry = orders.reduce((a, v) => {\n    //     a[v.name] = a[v.name] || []\n    //     a[v.name].push(v)\n    //     return a\n    // }, {})\n\n    // return Object.keys(ordersByShipCountry).map((country) => {\n    //     const ordersInCountry = ordersByShipCountry[country]\n\n    //     const accumulated = {}\n\n    //     ordersInCountry.forEach((o) => {\n    //         o.OrderDate = new Date(o.OrderDate);\n    //         const key = o.OrderDate.getFullYear() + '/' + (o.OrderDate.getMonth() + 1);\n    //         accumulated[key] = accumulated[key] || {\n    //             value: 0,\n    //             orderDate: o.OrderDate\n    //         };\n    //         accumulated[key].value++;\n    //     });\n\n    //     return {\n    //         rows: ordersInCountry,\n    //         country,\n    //         accumulated\n    //     }\n\n    // })\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n    req.data.orders = await prepareDataSource()\n}"},"property":"content","logged":true,"previousOperationId":"545f1dccdg11kpb","id":"nqnb4eoo1lfbn27","stack":"TypeError: Cannot read properties of undefined (reading 'authors')\n    at fetchOrders (sandbox.js:11:29)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async prepareDataSource (sandbox.js:24:21)\n    at async Object.beforeRender (sandbox.js:60:23)\n    at async executionFn (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:11)\n    at async run (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:184:24)\n    at async WorkerReporter._runInSandbox (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\runInSandbox.js:180:14)\n    at async executeScript (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:122:12)\n    at async Scripts._runScript (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:140:30)\n    at async Scripts.handleBeforeRender (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:64:7)","message":"Error when evaluating custom script /samples/Orders/orders-script\nCannot read properties of undefined (reading 'authors')\n\n(sandbox.js line 11:29)\n\n   9 |     const resAuthors = await axios.get('http://localhost:8000/api/authors')\n  10 |      \n> 11 |      req.authors = { ...req.authors,\n     |                             ^\n  12 |         ...resAuthors.data.data.map(author=> {\n  13 |           return {\n  14 |             ...author,\n\n(sandbox.js line 24:21)\n\n  22 | // group the data for report\n  23 | async function prepareDataSource() {\n> 24 |     const authors = await fetchOrders()\n     |                     ^\n  25 |     console.log(authors);\n  26 |     return authors;\n  27 |     // console.log(orders);\n\n(sandbox.js line 60:23)\n\n  58 | // add jsreport hook which modifies the report input data\n  59 | async function beforeRender(req, res) {\n> 60 |     req.data.orders = await prepareDataSource()\n     |                       ^\n  61 | }\n\n"}
