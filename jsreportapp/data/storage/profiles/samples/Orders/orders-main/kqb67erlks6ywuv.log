{"type":"operationStart","subtype":"profile","data":{"_id":"ITbGx3pJu2T9lUDY","timestamp":"2023-01-28T21:09:23.877Z","state":"queued","mode":"standard","creationDate":"2023-01-28T21:09:23.879Z","modificationDate":"2023-01-28T21:09:23.879Z","shortid":"pWeFgSP","$entitySet":"profiles"},"doDiffs":false,"timestamp":1674940163878,"id":"y8n4o5gayi2zcjx","previousOperationId":null,"operationId":"wyfpx06uosr61bv"}
{"type":"log","level":"info","message":"Render request 11 queued for execution and waiting for available worker","previousOperationId":"wyfpx06uosr61bv","timestamp":1674940163878,"id":"hldup9ldis0m85i"}
{"type":"operationStart","subtype":"render","name":"orders-main","previousOperationId":"wyfpx06uosr61bv","timestamp":1674940163902,"id":"80n9rmjcv63t0hq","previousEventId":"y8n4o5gayi2zcjx","operationId":"3evcy64my4wwlco"}
{"type":"log","timestamp":1674940163904,"level":"info","message":"Starting rendering request 11","meta":{"rootId":"kqb67erlks6ywuv","id":"kqb67erlks6ywuv"},"id":"jh7d0mj04e8ezpx","previousOperationId":"3evcy64my4wwlco"}
{"type":"log","timestamp":1674940163905,"level":"info","message":"Rendering template { name: orders-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"kqb67erlks6ywuv","id":"kqb67erlks6ywuv"},"id":"8ed46jtpyttfcg1","previousOperationId":"3evcy64my4wwlco"}
{"type":"log","timestamp":1674940163908,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"kqb67erlks6ywuv","id":"kqb67erlks6ywuv"},"id":"ev08606j9hzowci","previousOperationId":"3evcy64my4wwlco"}
{"type":"log","timestamp":1674940163915,"level":"debug","message":"Executing script orders-script (beforeRender)","meta":{"rootId":"kqb67erlks6ywuv","id":"kqb67erlks6ywuv"},"id":"f9ip1n0d8dw0w34","previousOperationId":"3evcy64my4wwlco"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1674940163946,"id":"v5qz4oghes0vtxp","previousEventId":"80n9rmjcv63t0hq","operationId":"nv2nqyxjl8hkbor","previousOperationId":"3evcy64my4wwlco"}
{"type":"operationStart","subtype":"script","name":"scripts orders-script","previousOperationId":"nv2nqyxjl8hkbor","timestamp":1674940163946,"id":"48rl40lmcnvl5r2","previousEventId":"v5qz4oghes0vtxp","operationId":"xwqnomznmn8f85d"}
{"type":"log","timestamp":1674940163954,"level":"warn","message":"Error when processing render request 11\n(because) error when evaluating custom script /samples/Orders/orders-script\nstr is not defined\n\n(sandbox.js line 14:21)\n\n  12 |             result.on('end', () => resolve(JSON.parse(str).value));\n  13 |         },\n> 14 |         console.log(str));\n     |                     ^\n  15 |     })\n  16 | }\n  17 |\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         http.get('http://localhost:8000/api/authors',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 20:26)\n\n  18 | // group the data for report\n  19 | async function prepareDataSource() {\n> 20 |     const orders = await fetchOrders()\n     |                          ^\n  21 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  22 |         a[v.name] = a[v.name] || []\n  23 |         a[v.name].push(v)\n\n(sandbox.js line 53:29)\n\n  51 | // add jsreport hook which modifies the report input data\n  52 | async function beforeRender(req, res) {\n> 53 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  54 | }\n\n(sandbox.js line 66:18)\nReferenceError: str is not defined\n    at sandbox.js:14:21\n    at new Promise (<anonymous>)\n    at fetchOrders (sandbox.js:6:12)\n    at prepareDataSource (sandbox.js:20:26)\n    at Object.beforeRender (sandbox.js:53:29)\n    at executionFn (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)\n    at sandbox.js:66:18","meta":{"rootId":"kqb67erlks6ywuv","id":"kqb67erlks6ywuv"},"id":"hxbcr3y1h1zwjp0","previousOperationId":"xwqnomznmn8f85d"}
{"type":"log","timestamp":1674940163954,"level":"warn","message":"Rendering request 11 finished with error in 78 ms","meta":{"rootId":"kqb67erlks6ywuv","id":"kqb67erlks6ywuv"},"id":"7jq7pj0jnq93g4a","previousOperationId":"xwqnomznmn8f85d"}
{"type":"error","timestamp":1674940163961,"statusCode":400,"weak":true,"lineNumber":14,"decoratedSuffix":"\n\n(sandbox.js line 14:21)\n\n  12 |             result.on('end', () => resolve(JSON.parse(str).value));\n  13 |         },\n> 14 |         console.log(str));\n     |                     ^\n  15 |     })\n  16 | }\n  17 |\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         http.get('http://localhost:8000/api/authors',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 20:26)\n\n  18 | // group the data for report\n  19 | async function prepareDataSource() {\n> 20 |     const orders = await fetchOrders()\n     |                          ^\n  21 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  22 |         a[v.name] = a[v.name] || []\n  23 |         a[v.name].push(v)\n\n(sandbox.js line 53:29)\n\n  51 | // add jsreport hook which modifies the report input data\n  52 | async function beforeRender(req, res) {\n> 53 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  54 | }\n\n(sandbox.js line 66:18)","entity":{"shortid":"BJX1Jw82ce","name":"orders-script","content":"// server side script fetching remote data and preparing report data source\nconst http = require('http');\n\n// call remote http rest api\nfunction fetchOrders() {\n    return new Promise((resolve, reject) => {\n        http.get('http://localhost:8000/api/authors',\n        (result) => {\n            var str = '';\n            result.on('data', (b) => str += b);\n            result.on('error', reject);\n            result.on('end', () => resolve(JSON.parse(str).value));\n        },\n        console.log(str));\n    })\n}\n\n// group the data for report\nasync function prepareDataSource() {\n    const orders = await fetchOrders()\n    const ordersByShipCountry = orders.reduce((a, v) => {\n        a[v.name] = a[v.name] || []\n        a[v.name].push(v)\n        return a\n    }, {})\n\n    return Object.keys(ordersByShipCountry).map((country) => {\n        const ordersInCountry = ordersByShipCountry[country]\n\n        const accumulated = {}\n\n        ordersInCountry.forEach((o) => {\n            o.OrderDate = new Date(o.OrderDate);\n            const key = o.OrderDate.getFullYear() + '/' + (o.OrderDate.getMonth() + 1);\n            accumulated[key] = accumulated[key] || {\n                value: 0,\n                orderDate: o.OrderDate\n            };\n            accumulated[key].value++;\n        });\n\n        return {\n            rows: ordersInCountry,\n            country,\n            accumulated\n        }\n\n    }).slice(0, 2)\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n    req.data.orders = await prepareDataSource()\n}"},"property":"content","logged":true,"previousOperationId":"xwqnomznmn8f85d","id":"uxeh7aixcjflcq1","stack":"ReferenceError: str is not defined\n    at sandbox.js:14:21\n    at new Promise (<anonymous>)\n    at fetchOrders (sandbox.js:6:12)\n    at prepareDataSource (sandbox.js:20:26)\n    at Object.beforeRender (sandbox.js:53:29)\n    at executionFn (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)\n    at sandbox.js:66:18","message":"Error when evaluating custom script /samples/Orders/orders-script\nstr is not defined\n\n(sandbox.js line 14:21)\n\n  12 |             result.on('end', () => resolve(JSON.parse(str).value));\n  13 |         },\n> 14 |         console.log(str));\n     |                     ^\n  15 |     })\n  16 | }\n  17 |\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         http.get('http://localhost:8000/api/authors',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 20:26)\n\n  18 | // group the data for report\n  19 | async function prepareDataSource() {\n> 20 |     const orders = await fetchOrders()\n     |                          ^\n  21 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  22 |         a[v.name] = a[v.name] || []\n  23 |         a[v.name].push(v)\n\n(sandbox.js line 53:29)\n\n  51 | // add jsreport hook which modifies the report input data\n  52 | async function beforeRender(req, res) {\n> 53 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  54 | }\n\n(sandbox.js line 66:18)"}
