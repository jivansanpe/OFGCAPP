{"type":"operationStart","subtype":"profile","data":{"_id":"yQBmHULUyaD4z62P","timestamp":"2023-02-01T17:47:41.870Z","state":"queued","mode":"standard","creationDate":"2023-02-01T17:47:41.872Z","modificationDate":"2023-02-01T17:47:41.872Z","shortid":"WV1v-y8","$entitySet":"profiles"},"doDiffs":false,"timestamp":1675273661871,"id":"9m6irun3lyllcea","previousOperationId":null,"operationId":"yrjwofjhtuacl5z"}
{"type":"log","level":"info","message":"Render request 36 queued for execution and waiting for available worker","previousOperationId":"yrjwofjhtuacl5z","timestamp":1675273661871,"id":"z53262aa9zse9mn"}
{"type":"operationStart","subtype":"render","name":"orders-main","previousOperationId":"yrjwofjhtuacl5z","timestamp":1675273661880,"id":"adj55xjs5fryk2t","previousEventId":"9m6irun3lyllcea","operationId":"yninx9jawj9stlm"}
{"type":"log","timestamp":1675273661880,"level":"info","message":"Starting rendering request 36","meta":{"rootId":"b031o8hiupstpxm","id":"b031o8hiupstpxm"},"id":"x3splhzit3vxn6w","previousOperationId":"yninx9jawj9stlm"}
{"type":"log","timestamp":1675273661881,"level":"info","message":"Rendering template { name: orders-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"b031o8hiupstpxm","id":"b031o8hiupstpxm"},"id":"p0qzjw8z032gini","previousOperationId":"yninx9jawj9stlm"}
{"type":"log","timestamp":1675273661882,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"b031o8hiupstpxm","id":"b031o8hiupstpxm"},"id":"1n9s12rodzkz51v","previousOperationId":"yninx9jawj9stlm"}
{"type":"log","timestamp":1675273661886,"level":"debug","message":"Executing script orders-script (beforeRender)","meta":{"rootId":"b031o8hiupstpxm","id":"b031o8hiupstpxm"},"id":"okhksyrutkqhshr","previousOperationId":"yninx9jawj9stlm"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1675273661916,"id":"7fazxi2pebymun7","previousEventId":"adj55xjs5fryk2t","operationId":"yeq76wfa64qrr43","previousOperationId":"yninx9jawj9stlm"}
{"type":"operationStart","subtype":"script","name":"scripts orders-script","previousOperationId":"yeq76wfa64qrr43","timestamp":1675273661916,"id":"c79d7ewbp0o7lt6","previousEventId":"7fazxi2pebymun7","operationId":"ejsk10cj5v7qwlo"}
{"type":"log","timestamp":1675273661916,"level":"debug","message":"(console:log) AAAAAAAAAAAAAAAAAAAAAAA  undefined","meta":{"userLevel":true,"rootId":"b031o8hiupstpxm","id":"b031o8hiupstpxm"},"id":"kfoyla494mr8kw2","previousOperationId":"ejsk10cj5v7qwlo"}
{"type":"log","timestamp":1675273662171,"level":"warn","message":"Error when processing render request 36\n(because) error when evaluating custom script /samples/Orders/orders-script\nCannot read properties of undefined (reading 'data')\n\n(sandbox.js line 11:29)\n\n   9 |     const resAuthors = await axios.get('http://localhost:8000/api/authors')\n  10 |      \n> 11 |      req.authors = { ...req.data.data,\n     |                             ^\n  12 |         ...resAuthors.data.map(author=> {\n  13 |           return {\n  14 |             ...author,\n\n(sandbox.js line 24:21)\n\n  22 | // group the data for report\n  23 | async function prepareDataSource() {\n> 24 |     const authors = await fetchOrders()\n     |                     ^\n  25 |     console.log(authors);\n  26 |     return authors;\n  27 |     // console.log(orders);\n\n(sandbox.js line 60:23)\n\n  58 | // add jsreport hook which modifies the report input data\n  59 | async function beforeRender(req, res) {\n> 60 |     req.data.orders = await prepareDataSource()\n     |                       ^\n  61 | }\n\n\nTypeError: Cannot read properties of undefined (reading 'data')\n    at fetchOrders (sandbox.js:11:29)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async prepareDataSource (sandbox.js:24:21)\n    at async Object.beforeRender (sandbox.js:60:23)\n    at async executionFn (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:11)\n    at async run (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:184:24)\n    at async WorkerReporter._runInSandbox (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\runInSandbox.js:180:14)\n    at async executeScript (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:122:12)\n    at async Scripts._runScript (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:140:30)\n    at async Scripts.handleBeforeRender (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:64:7)","meta":{"rootId":"b031o8hiupstpxm","id":"b031o8hiupstpxm"},"id":"2dap1qropo32muc","previousOperationId":"ejsk10cj5v7qwlo"}
{"type":"log","timestamp":1675273662172,"level":"warn","message":"Rendering request 36 finished with error in 302 ms","meta":{"rootId":"b031o8hiupstpxm","id":"b031o8hiupstpxm"},"id":"6ok71em3a96oz3n","previousOperationId":"ejsk10cj5v7qwlo"}
{"type":"error","timestamp":1675273662176,"statusCode":400,"weak":true,"lineNumber":11,"decoratedSuffix":"\n\n(sandbox.js line 11:29)\n\n   9 |     const resAuthors = await axios.get('http://localhost:8000/api/authors')\n  10 |      \n> 11 |      req.authors = { ...req.data.data,\n     |                             ^\n  12 |         ...resAuthors.data.map(author=> {\n  13 |           return {\n  14 |             ...author,\n\n(sandbox.js line 24:21)\n\n  22 | // group the data for report\n  23 | async function prepareDataSource() {\n> 24 |     const authors = await fetchOrders()\n     |                     ^\n  25 |     console.log(authors);\n  26 |     return authors;\n  27 |     // console.log(orders);\n\n(sandbox.js line 60:23)\n\n  58 | // add jsreport hook which modifies the report input data\n  59 | async function beforeRender(req, res) {\n> 60 |     req.data.orders = await prepareDataSource()\n     |                       ^\n  61 | }\n\n","entity":{"shortid":"BJX1Jw82ce","name":"orders-script","content":"// server side script fetching remote data and preparing report data source\nconst http = require('http');\nconst axios = require('axios');\n// call remote http rest api\nasync function fetchOrders(req, res) {\n\nconsole.log('AAAAAAAAAAAAAAAAAAAAAAA ' , req);\n\n    const resAuthors = await axios.get('http://localhost:8000/api/authors')\n     \n     req.authors = { ...req.data.data,\n        ...resAuthors.data.map(author=> {\n          return {\n            ...author,\n          }\n        })\n    }\n    console.log(req.data.authors)\n\n    return req.data.authors;\n}\n// group the data for report\nasync function prepareDataSource() {\n    const authors = await fetchOrders()\n    console.log(authors);\n    return authors;\n    // console.log(orders);\n    // const ordersByShipCountry = orders.reduce((a, v) => {\n    //     a[v.name] = a[v.name] || []\n    //     a[v.name].push(v)\n    //     return a\n    // }, {})\n\n    // return Object.keys(ordersByShipCountry).map((country) => {\n    //     const ordersInCountry = ordersByShipCountry[country]\n\n    //     const accumulated = {}\n\n    //     ordersInCountry.forEach((o) => {\n    //         o.OrderDate = new Date(o.OrderDate);\n    //         const key = o.OrderDate.getFullYear() + '/' + (o.OrderDate.getMonth() + 1);\n    //         accumulated[key] = accumulated[key] || {\n    //             value: 0,\n    //             orderDate: o.OrderDate\n    //         };\n    //         accumulated[key].value++;\n    //     });\n\n    //     return {\n    //         rows: ordersInCountry,\n    //         country,\n    //         accumulated\n    //     }\n\n    // })\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n    req.data.orders = await prepareDataSource()\n}"},"property":"content","logged":true,"previousOperationId":"ejsk10cj5v7qwlo","id":"6ejveshppniso09","stack":"TypeError: Cannot read properties of undefined (reading 'data')\n    at fetchOrders (sandbox.js:11:29)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async prepareDataSource (sandbox.js:24:21)\n    at async Object.beforeRender (sandbox.js:60:23)\n    at async executionFn (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:11)\n    at async run (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:184:24)\n    at async WorkerReporter._runInSandbox (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\runInSandbox.js:180:14)\n    at async executeScript (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:122:12)\n    at async Scripts._runScript (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:140:30)\n    at async Scripts.handleBeforeRender (D:\\Clase\\Segundo\\Proyecto\\OFGCAPP\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\worker.js:64:7)","message":"Error when evaluating custom script /samples/Orders/orders-script\nCannot read properties of undefined (reading 'data')\n\n(sandbox.js line 11:29)\n\n   9 |     const resAuthors = await axios.get('http://localhost:8000/api/authors')\n  10 |      \n> 11 |      req.authors = { ...req.data.data,\n     |                             ^\n  12 |         ...resAuthors.data.map(author=> {\n  13 |           return {\n  14 |             ...author,\n\n(sandbox.js line 24:21)\n\n  22 | // group the data for report\n  23 | async function prepareDataSource() {\n> 24 |     const authors = await fetchOrders()\n     |                     ^\n  25 |     console.log(authors);\n  26 |     return authors;\n  27 |     // console.log(orders);\n\n(sandbox.js line 60:23)\n\n  58 | // add jsreport hook which modifies the report input data\n  59 | async function beforeRender(req, res) {\n> 60 |     req.data.orders = await prepareDataSource()\n     |                       ^\n  61 | }\n\n"}
